--------------------------------------------------------------------------------
Profile data file 'callgrind.out' (creator: callgrind-3.22.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 349424210
Trigger: Program termination
Profiled target:  ./cub3d maps/test.cub (PID 120919, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,437,042,006 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
1,007,496,794 (70.11%)  src/drawing/draw_basics.c:img_draw_pixel [/home/val/cub3d/cub3d]
  275,550,893 (19.17%)  src/rendering/render.c:render [/home/val/cub3d/cub3d]
   91,309,058 ( 6.35%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms [/usr/lib/x86_64-linux-gnu/libc.so.6]
   43,335,558 ( 3.02%)  includes/cub3d_drawing.h:render
    5,207,656 ( 0.36%)  src/rendering/raycast_dda.c:raycast_tilemap [/home/val/cub3d/cub3d]

--------------------------------------------------------------------------------
-- Auto-annotated source: src/drawing/draw_basics.c
--------------------------------------------------------------------------------
Ir                   

-- line 14 ----------------------------------------
          .           
          .           static uint8_t alpha_table[256][256];
          .           static int alpha_table_initialized = 0;
          .           
          .           static void init_alpha_table(void)
          .           {
          .               if (alpha_table_initialized) return;
          .               
      1,280 ( 0.00%)      for (int a = 0; a < 256; a++) {
        256 ( 0.00%)          for (int c = 0; c < 256; c++) {
     22,547 ( 0.00%)              alpha_table[a][c] = (a * c + 128) >> 8;
          .                   }
          .               }
          3 ( 0.00%)      alpha_table_initialized = 1;
          .           }
          .           
          .           void img_draw_pixel(t_png_pixel8 src, int x, int y, t_img_data *img)
343,063,728 (23.87%)  {
          .               uint8_t *pixel;
          .               
          .               // Init table si pas encore fait
128,648,898 ( 8.95%)      if (!alpha_table_initialized)
          .                   init_alpha_table();
          .           
          .               // Vérifications ultra-rapides
128,648,898 ( 8.95%)      if ((unsigned)x >= (unsigned)img->width || (unsigned)y >= (unsigned)img->height || src.a == 0)
          .                   return;
          .           
107,207,415 ( 7.46%)      pixel = (uint8_t *)(img->buffer + (y * img->size_line + (x << 2))); // x * 4 = x << 2
          .               
          .               // Cas pixel opaque - écriture directe
 42,882,966 ( 2.98%)      if (src.a == 255) {
 62,913,483 ( 4.38%)          if (img->endian == 1) {
          .                       pixel[0] = 255;
          .                       pixel[1] = src.r;
          .                       pixel[2] = src.g;
          .                       pixel[3] = src.b;
          .                   } else {
 20,736,000 ( 1.44%)              pixel[0] = src.b;
          .                       pixel[1] = src.g;
 20,736,000 ( 1.44%)              pixel[2] = src.r;
 41,472,000 ( 2.89%)              pixel[3] = 255;
          .                   }
          .                   return;
          .               }
          .           
          .               // Alpha blending avec lookup table
    705,483 ( 0.05%)      uint8_t inv_alpha = 255 - src.a;
          .               
  1,410,966 ( 0.10%)      if (img->endian == 1) {
          .                   pixel[0] = 255;
  5,643,864 ( 0.39%)          pixel[1] = alpha_table[src.a][src.r] + alpha_table[inv_alpha][pixel[1]];
  2,821,932 ( 0.20%)          pixel[2] = alpha_table[src.a][src.g] + alpha_table[inv_alpha][pixel[2]];
  4,232,898 ( 0.29%)          pixel[3] = alpha_table[src.a][src.b] + alpha_table[inv_alpha][pixel[3]];
          .               } else {
  9,171,279 ( 0.64%)          pixel[0] = alpha_table[src.a][src.b] + alpha_table[inv_alpha][pixel[0]];
    705,483 ( 0.05%)          pixel[1] = alpha_table[src.a][src.g] + alpha_table[inv_alpha][pixel[1]];
    705,483 ( 0.05%)          pixel[2] = alpha_table[src.a][src.r] + alpha_table[inv_alpha][pixel[2]];
          .                   pixel[3] = src.a;
          .               }
 85,765,932 ( 5.97%)  }
--------------------------------------------------------------------------------
-- Auto-annotated source: src/rendering/render.c
--------------------------------------------------------------------------------
Ir                   

-- line 11 ----------------------------------------
          .           /* ************************************************************************** */
          .           
          .           #include "cub3d.h"
          .           #include "cub3d_rendering.h"
          .           
          .           static void	render_init(int width, int height, t_render_context *context, t_game *game);
          .           
          .           void	render(t_game *game)
        120 ( 0.00%)  {
          .           	t_render_context	context;
          .           
          .           	render_init(WINDOW_WIDTH, WINDOW_HEIGHT, &context, game);
          .           	render_rays(0, context.render_width, &context);
         50 ( 0.00%)  	draw_minimap(game);
 55,368,533 ( 3.85%)  => /home/val/cub3d/src/minimap.c:draw_minimap (10x)
         70 ( 0.00%)  }
          .           
          .           static void	render_init(int width, int height, t_render_context *context, t_game *game)
          .           {
          .           	context->game = game;
         10 ( 0.00%)  	context->frame = game->img;
          .           	context->player = &game->player;
         20 ( 0.00%)  	context->position = game->player.position;
         20 ( 0.00%)  	context->direction = game->player.rad_direction;
          .           	context->render_height = height;
          .           	context->render_width = width;
         40 ( 0.00%)  	context->fov = deg_to_rad(game->player.fov_deg);
         30 ( 0.00%)  => ???:deg_to_rad (10x)
          .           }
          .           
          .           static void render_ray(float ray_angle, int collumn,
          .           		t_raycast_hit *result, t_render_context *context);
          .           
          .           void	render_rays(int start_x, int end_x, t_render_context *render)
          .           {
          .           	t_ray2			ray;
          .           	t_raycast_hit	ray_result;
          .           	int				x;
          .           	float			camera_x;
          .           	float			ray_angle;
          .           
         10 ( 0.00%)  	x = start_x;
     38,400 ( 0.00%)  	while (x < end_x)
          .           	{
    115,200 ( 0.01%)  		camera_x = 2.0 * x / (float)WINDOW_WIDTH - 1.0;
     96,110 ( 0.01%)  		ray_angle = render->direction + atan(camera_x * tan(render->fov / 2));
  1,214,450 ( 0.08%)  => ???:0x000000000010a680 (19,200x)
        760 ( 0.00%)  => ???:0x000000000010a530 (10x)
    115,200 ( 0.01%)  		ray = ray2_from_angle(render->position, ray_angle);
  1,286,400 ( 0.09%)  => ???:ray2_from_angle (19,200x)
     76,800 ( 0.01%)  		ray_result = raycast_tilemap(&ray, render->game->tilemap);
  7,036,888 ( 0.49%)  => /home/val/cub3d/src/rendering/raycast_dda.c:raycast_tilemap (19,200x)
          .           		render_ray(ray_angle, x, &ray_result, render);
     19,200 ( 0.00%)  		x++;
          .           	}
          .           }
          .           
          .           static void render_ray(float ray_angle, int collumn,
          .           		t_raycast_hit *result, t_render_context *context)
          .           {
          .           	float	corrected_dist;
          .           	int		wall_height;
          .           	int		wall_start;
          .           	int		wall_end;
          .           	int		y;
          .           
    115,200 ( 0.01%)  	corrected_dist = result->dist * cosf(ray_angle - context->direction);
    441,520 ( 0.03%)  => ???:0x000000000010a7d0 (19,200x)
     57,600 ( 0.00%)  	wall_height = WINDOW_HEIGHT / corrected_dist;
    192,000 ( 0.01%)  	wall_start = clamp(-wall_height / 2 + WINDOW_HEIGHT / 2, 0, WINDOW_HEIGHT);
    134,400 ( 0.01%)  => ???:clamp (19,200x)
    115,200 ( 0.01%)  	wall_end = clamp(wall_height / 2 + WINDOW_HEIGHT / 2, 0, WINDOW_HEIGHT);
    134,400 ( 0.01%)  => ???:clamp (19,200x)
     19,200 ( 0.00%)  	y = 0;
 41,491,200 ( 2.89%)  	while (y < WINDOW_HEIGHT)
          .           	{
 41,472,000 ( 2.89%)  		if (y < wall_start)
 18,906,774 ( 1.32%)  			img_draw_pixel(rgba8(0, 0, 255, 255), collumn, y, context->frame);
144,951,934 (10.09%)  => /home/val/cub3d/src/drawing/draw_basics.c:img_draw_pixel (3,151,129x)
 35,169,742 ( 2.45%)  		else if (y > wall_end)
 15,698,425 ( 1.09%)  			img_draw_pixel(rgba8(0, 255, 255, 255), collumn, y, context->frame);
144,425,510 (10.05%)  => /home/val/cub3d/src/drawing/draw_basics.c:img_draw_pixel (3,139,685x)
          .           		else
101,116,302 ( 7.04%)  			img_draw_pixel(rgba8(220, 0, 255 - 80 * result->orientation, 255),
664,478,556 (46.24%)  => /home/val/cub3d/src/drawing/draw_basics.c:img_draw_pixel (14,445,186x)
          .           				collumn, y, context->frame);
 20,736,000 ( 1.44%)  		y++;
          .           	}
          .           }

--------------------------------------------------------------------------------
-- Auto-annotated source: src/rendering/raycast_dda.c
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .           				t_vec2 *step_dist, t_raycast_hit *result);
      .           static void	raycast_launch(t_ivec2 actual_tile, t_vec2 delta_dist,
      .           				t_vec2 step_dist, t_raycast_hit *result);
      .           static inline bool	check_tile(int tile_x, int tile_y, t_raycast_hit *result);
      .           static inline void	set_dda_ray_dist(t_ray2 *ray, t_ivec2 actual_tile,
      .           			t_ivec2 step, t_raycast_hit *result);
      .           
      .           t_raycast_hit	raycast_tilemap(t_ray2 *ray, t_tilemap *tilemap)
192,000 ( 0.01%)  {
      .           	t_raycast_hit	result;
      .           	t_ivec2			actual_tile;
      .           	t_vec2			delta_dist;
      .           	t_vec2			step_dist;
      .           
153,600 ( 0.01%)  	result.original_ray = *ray;
      .           	result.hitted = false;
115,200 ( 0.01%)  	result.tile_info = g_base_tile_info[TILE_EMPTY];
      .           	result.tilemap = tilemap;
      .           	raycast_init(&actual_tile, &delta_dist, &step_dist, &result);
      .           	raycast_launch(actual_tile, delta_dist, step_dist, &result);
326,400 ( 0.02%)  	return (result);
172,800 ( 0.01%)  }
      .           
      .           static inline void raycast_init(t_ivec2 *actual_tile, t_vec2 *delta_dist,
      .           				t_vec2 *step_dist, t_raycast_hit *result)
      .           {
      .           	t_ray2	*ray;
      .           
      .           	ray = &result->original_ray;
 38,400 ( 0.00%)  	actual_tile->x = (int)result->original_ray.origin.x;
 38,400 ( 0.00%)  	actual_tile->y = (int)result->original_ray.origin.y;
 96,000 ( 0.01%)  	if (float_equal(ray->dir_normal.x, 0))
153,600 ( 0.01%)  => ???:float_equal (19,200x)
 38,400 ( 0.00%)  		delta_dist->x = INFINITY;
      .           	else
 96,000 ( 0.01%)  		delta_dist->x = fabs(1 / ray->dir_normal.x);
 96,000 ( 0.01%)  	if (float_equal(ray->dir_normal.y, 0))
153,600 ( 0.01%)  => ???:float_equal (19,200x)
 38,400 ( 0.00%)  		delta_dist->y = INFINITY;
      .           	else
 76,800 ( 0.01%)  		delta_dist->y = fabs(1 / ray->dir_normal.y);
 57,600 ( 0.00%)  	if (ray->dir_normal.x < 0.0)
 68,586 ( 0.00%)  		step_dist->x = (ray->origin.x - actual_tile->x) * delta_dist->x;
      .           	else
 84,618 ( 0.01%)  		step_dist->x = (actual_tile->x + 1.0 - ray->origin.x) *  delta_dist->x;
 57,600 ( 0.00%)  	if (ray->dir_normal.y < 0.0)
134,400 ( 0.01%)  		step_dist->y = (ray->origin.y - actual_tile->y) * delta_dist->y;
      .           	else
      .           		step_dist->y = (actual_tile->y + 1.0 - ray->origin.y) *  delta_dist->y;
      .           }
      .           
      .           static void	raycast_launch(t_ivec2 actual_tile, t_vec2 delta_dist,
      .           				t_vec2 step_dist, t_raycast_hit *result)
      .           {
      .           	t_ivec2	step;
      .           
 57,600 ( 0.00%)  	step.x = sign(result->original_ray.dir_normal.x);
192,000 ( 0.01%)  => ???:sign (19,200x)
 57,600 ( 0.00%)  	step.y = sign(result->original_ray.dir_normal.y);
192,000 ( 0.01%)  => ???:sign (19,200x)
445,962 ( 0.03%)  	while (fmin(step_dist.x, step_dist.y) < RENDER_DISTANCE)
213,381 ( 0.01%)  => ???:fmin (71,127x)
      .           	{
284,508 ( 0.02%)  		if (step_dist.x < step_dist.y)
      .           		{
 35,656 ( 0.00%)  			step_dist.x += delta_dist.x;
 35,656 ( 0.00%)  			actual_tile.x += step.x;
 17,828 ( 0.00%)  			result->orientation = 0;
      .           		}
      .           		else
      .           		{
106,598 ( 0.01%)  			step_dist.y += delta_dist.y;
106,598 ( 0.01%)  			actual_tile.y += step.y;
106,598 ( 0.01%)  			result->orientation = 1;
      .           		}
      .           		if (check_tile(actual_tile.x, actual_tile.y, result))
      .           		{
      .           			set_dda_ray_dist(&result->original_ray, actual_tile, step, result);
 19,200 ( 0.00%)  			return ;
      .           		}
      .           	}
      .           	result->dist = INFINITY;
      .           }
      .           
      .           static inline bool	check_tile(int tile_x, int tile_y, t_raycast_hit *result)
      .           {
      .           	t_tile	*tile;
      .           
569,016 ( 0.04%)  	if (!tilemap_is_tile_valid(tile_x, tile_y, result->tilemap))
497,889 ( 0.03%)  => /home/val/cub3d/src/tilemaps/tilemap_basics.c:tilemap_is_tile_valid (71,127x)
      .           		return (false);
284,508 ( 0.02%)  	tile = tilemap_get_tile(tile_x, tile_y, result->tilemap);
426,762 ( 0.03%)  => /home/val/cub3d/src/tilemaps/tilemap_basics.c:tilemap_get_tile (71,127x)
569,016 ( 0.04%)  	result->tile_info = tile->info;
142,254 ( 0.01%)  	result->tile_type = tile->type;
142,254 ( 0.01%)  	if (tile->info.blocking)
      .           	{
 19,200 ( 0.00%)  		result->hitted = true;
      .           		return (true);
      .           	}
      .           	return (false);
      .           }
      .           
      .           static inline void	set_dda_ray_dist(t_ray2 *ray, t_ivec2 actual_tile,
      .           			t_ivec2 step, t_raycast_hit *result)
      .           {
 57,600 ( 0.00%)  	if (result->orientation == 0)
224,197 ( 0.02%)  		result->dist = (actual_tile.x - ray->origin.x + (1 - step.x) / 2) / ray->dir_normal.x;
      .           	else
 44,603 ( 0.00%)  		result->dist = (actual_tile.y - ray->origin.y + (1 - step.y) / 2) / ray->dir_normal.y;
      .           }

--------------------------------------------------------------------------------
-- Auto-annotated source: includes/cub3d_drawing.h
--------------------------------------------------------------------------------
Ir                  

-- line 13 ----------------------------------------
         .           #ifndef CUB3D_DRAWING_H
         .           # define CUB3D_DRAWING_H
         .           # include "crazypng.h"
         .           # include "maths2_geometry.h"
         .           # include "cub3d_structs.h"
         .           
         .           static inline t_png_pixel8	rgba8(uint8_t r, uint8_t g, uint8_t b, uint8_t a)
         .           {
43,335,558 ( 3.02%)  	return ((t_png_pixel8) {r, g, b, a});
         .           }
         .           
         .           static inline int	rgba_to_int(t_png_pixel8 rgba)
         .           {
         .           	return (rgba.a << 24 | rgba.r << 16 | rgba.g << 8 | rgba.b);
         .           }
         .           
         .           void		img_draw_pixel(t_png_pixel8 rgba, int x, int y, t_img_data *img);
-- line 29 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,331,590,901 (92.66%)  events annotated

